
from langchain_openai import ChatOpenAI
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.output_parsers import StrOutputParser

from langchain.agents import AgentExecutor, create_openai_functions_agent

from langchain_community.tools.yahoo_finance_news import YahooFinanceNewsTool
from langchain_community.utilities.alpha_vantage import AlphaVantageAPIWrapper
from langchain_community.agent_toolkits.polygon.toolkit import PolygonToolkit
from langchain_community.utilities.polygon import PolygonAPIWrapper
from langchain_community.agent_toolkits.financial_datasets.toolkit import FinancialDatasetsToolkit
from langchain_community.utilities.financial_datasets import FinancialDatasetsAPIWrapper

import os
from dotenv import load_dotenv
import streamlit as st

# üîπ Load API keys
load_dotenv()
os.environ["OPENAI_API_KEY"] = os.getenv("OPENAI_API_KEY")
os.environ["ALPHAVANTAGE_API_KEY"] = os.getenv("ALPHAVANTAGE_API_KEY")
#os.environ["POLYGON_API_KEY"] = os.getenv("POLYGON_API_KEY")
os.environ["FINANCIAL_DATASETS_API_KEY"] = os.getenv("FINANCIAL_DATASETS_API_KEY")

# üîπ Streamlit UI
st.set_page_config(page_title="Finance Assistant", page_icon="üìà", layout="wide")
st.title("üìä AI-Powered Finance Assistant with Buy/Sell Recommendation")

# ‚úÖ Custom CSS
st.markdown("""
    <style>
    .rec-box {
        padding: 20px;
        border-radius: 15px;
        text-align: center;
        font-size: 24px;
        font-weight: bold;
        margin-top: 20px;
        box-shadow: 0 6px 15px rgba(0,0,0,0.3);
        animation: fadeIn 1.2s ease-in-out;
    }
    .buy {
        background: linear-gradient(135deg, #28a745, #5cd65c);
        color: white;
    }
    .sell {
        background: linear-gradient(135deg, #dc3545, #ff6b6b);
        color: white;
    }
    .hold {
        background: linear-gradient(135deg, #ffc107, #ffd966);
        color: black;
    }
    @keyframes fadeIn {
        from {opacity: 0; transform: translateY(10px);}
        to {opacity: 1; transform: translateY(0);}
    }
    </style>
""", unsafe_allow_html=True)

# üîπ User Input
input_text = st.text_input("üí¨ Ask about stocks, finance, or general queries:")

# üîπ LLM Setup
llm = ChatOpenAI(model="gpt-4o-mini", temperature=0.5)

# üîπ Tools
yahoo_news_tool = YahooFinanceNewsTool()
alpha_vantage = AlphaVantageAPIWrapper()

#polygon_api = PolygonAPIWrapper(polygon_api_key=os.environ["POLYGON_API_KEY"])
#polygon_toolkit = PolygonToolkit.from_polygon_api_wrapper(polygon_api)

fd_wrapper = FinancialDatasetsAPIWrapper(
    financial_datasets_api_key=os.environ["FINANCIAL_DATASETS_API_KEY"]
)
fd_toolkit = FinancialDatasetsToolkit(api_wrapper=fd_wrapper)

tools = [
    yahoo_news_tool,
   # *polygon_toolkit.get_tools(),
    *fd_toolkit.get_tools(),
]

# üîπ Prompt
system_prompt = """
You are a financial assistant with access to stock data, news, and financial datasets.
When a user asks about a company/stock:
- Retrieve and analyze recent market data & sentiment.
- Provide a BUY, SELL, or HOLD recommendation.
- Explain your reasoning clearly in qualitative terms.
- If data is uncertain, recommend HOLD.

For general questions, just answer normally.
"""

prompt = ChatPromptTemplate.from_messages([
    ("system", system_prompt),
    ("user", "Question: {question}"),
    ("assistant", "{agent_scratchpad}"),
])

# üîπ Agent
agent = create_openai_functions_agent(
    llm=llm,
    tools=tools,
    prompt=prompt
)

agent_executor = AgentExecutor(agent=agent, tools=tools, verbose=True)

# üîπ Run
if input_text:
    try:
        response = agent_executor.invoke({"question": input_text})
        answer = response["output"]

        st.subheader("üîé Assistant‚Äôs Analysis")
        st.write(answer)

        # ‚úÖ Highlight recommendation
        if "BUY" in answer.upper():
            st.markdown('<div class="rec-box buy">‚úÖ Recommendation: BUY</div>', unsafe_allow_html=True)
        elif "SELL" in answer.upper():
            st.markdown('<div class="rec-box sell">üö® Recommendation: SELL</div>', unsafe_allow_html=True)
        elif "HOLD" in answer.upper():
            st.markdown('<div class="rec-box hold">ü§î Recommendation: HOLD</div>', unsafe_allow_html=True)

    except Exception as e:
        st.error(f"‚ö†Ô∏è Error while processing: {e}")

